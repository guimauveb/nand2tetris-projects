//init
@256
D=A
@SP
M=D
@Sys.initret$0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.initret$0)
//function Sys.init 0 line 0
(Sys.init)
@0
D=A
@R15
M=D
@stop.push.nVarsSys.init
D;JEQ
(push.nVarsSys.init)
@SP
A=M
M=0
@SP
M=M+1
@R15
MD=M-1
@push.nVarsSys.init
D;JGT
(stop.push.nVarsSys.init)
//push constant 4 line 1
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Main.fibonacci 1    line 2
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
//label WHILE line 3
(WHILE)
//goto WHILE               line 4
@WHILE
0;JMP
//function Main.fibonacci 0 line 5
(Main.fibonacci)
@0
D=A
@R15
M=D
@stop.push.nVarsMain.fibonacci
D;JEQ
(push.nVarsMain.fibonacci)
@SP
A=M
M=0
@SP
M=M+1
@R15
MD=M-1
@push.nVarsMain.fibonacci
D;JGT
(stop.push.nVarsMain.fibonacci)
//push argument 0 line 6
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2 line 7
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt                      line 8
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@ISLESS8
D;JLT
@ISNOTLESS8
D;JGE
(ISLESS8)
@SP
A=M
M=-1
@SP
M=M+1
@END8
0;JMP
(ISNOTLESS8)
@SP
A=M
M=0
@SP
M=M+1
(END8)
//if-goto IF_TRUE line 9
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE
//goto IF_FALSE line 10
@IF_FALSE
0;JMP
//label IF_TRUE           line 11
(IF_TRUE)
//push argument 0 line 12
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//return line 13
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@retAddr13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@retAddr13
A=M
0;JMP
//label IF_FALSE          line 14
(IF_FALSE)
//push argument 0 line 15
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2 line 16
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub line 17
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
AM=M+1
//call Main.fibonacci 1   line 18
@Main.fibonacci$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.18)
//push argument 0 line 19
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1 line 20
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub line 21
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
AM=M+1
//call Main.fibonacci 1   line 22
@Main.fibonacci$ret.22
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.22)
//add                     line 23
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
AM=M+1
//return line 24
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@retAddr24
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R13
AM=M-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@retAddr24
A=M
0;JMP
//Endless Loop
(END)
@END
0;JMP
