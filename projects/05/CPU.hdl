// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // First Mux, ALU output if A instruction, instruction input if C instruction //
    Not(in=instruction[15], out=notOpcode, out=notOpcode2);
    Mux16(a=ALUoutput, b[15]=false, b[0..14]=instruction[0..14], sel=notOpcode, out=toAReg);  

    // Aregister //
    Or(a=notOpcode2, b=instruction[5], out=loadAReg);
    ARegister(in=toAReg, load=loadAReg, out=outAReg, out[0..14]=addressM);

    // M or AReg to ALU y inpunt, according to the a bit value //
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=AorM);   

    // DRegister to ALU x input //
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=ALUoutput, load=loadDReg, out=outDReg);   

    // ALU control bits, taken from the c-bit of a C instruction //

    ALU(x=outDReg, 
        y=AorM, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        zr=zroutput, 
        ng=ngoutput, 
        out=ALUoutput
        );

    // Clean ALU output if no computation is done //
    Mux16(a=ALUoutput, b=false, sel=notOpcode, out=ALUoutputcleaned);

    // Decide if ALU output should be written in memory //
    And(a=instruction[15], b=instruction[3], out=writeM, out=writeM2);
    Mux16(a=false, b=ALUoutputcleaned, sel=writeM2, out=outM);

    // Invert zr value //
    Not(in=zroutput, out=notzr);

    // Check ALU zr and ng bits //

    // JLE
    Or(a=zroutput, b=ngoutput, out=jle);

    // JEQ
    Not(in=notzroutput, out=jeq);

    // JGE 
    Not(in=ngoutput, out=notngoutput);
    Or(a=zroutput, b=notngoutput, out=jge);

    // JGT
    Not(in=zroutput, out=notzroutput);
    Not(in=ngoutput, out=notngouput);
    And(a=notzroutput, b=notngoutput, out=jgt);

    // JLT
    Mux(a=false, b=true, sel=ngoutput, out=jlt);

    // JNE
    Mux(a=true, b=false, sel=zroutput, out=jne);

    // Check if C instruction

    // J1
    And(a=instruction[15], b=instruction[2], out=j1);
    // J2
    And(a=instruction[15], b=instruction[1], out=j2);
    // J3
    And(a=instruction[15], b=instruction[0], out=j3);

    And(a=jgt, b=j3, out=jumpjgt);
    And(a=jeq, b=j2, out=jumpjeq);
    And(a=jlt, b=j1, out=jumpjlt);

    And(a=jumpjgt, b=jumpjlt, out=jumpjne);
    And(a=jumpjgt, b=jumpjeq, out=jumpejge);
    And(a=jumpjeq, b=jumpjlt, out=jumpjle);

    And(a=j1, b=j2, out=j1j2);
    And(a=j1j2, b=j3, out=jump);

    Or8Way(in[0]=false, in[1]=jumpjgt, in[2]=jumpjeq, in[3]=jumpjlt, in[4]=jumpjne, in[5]=jumpejge, in[6]=jumpjle, in[7]=jump, out=loadpc);

    Not(in=loadpc, out=shouldInc);

    PC(in=outAReg, reset=reset, load=loadpc, inc=shouldInc, out[0..14]=pc);

}
















